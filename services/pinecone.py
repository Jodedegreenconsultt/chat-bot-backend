# from langchain.embeddings.openai import OpenAIEmbeddings
# from langchain.vectorstores import Pinecone
# from langchain.chains.question_answering import load_qa_chain
# from langchain.chat_models import ChatOpenAI



# def Query_With_Namespace(index_name, namespace,  query):
#     print(query)
#     chain = load_qa_chain(llm=ChatOpenAI(), chain_type='stuff')
#     embedidings = OpenAIEmbeddings()
#     pineconeSearch = Pinecone.from_texts(
#         [], embedidings, index_name=index_name, namespace=namespace)
#     try:
#         docs = pineconeSearch.similarity_search(
#             query, includeMetadata=True)
#         return chain.run(input_documents=docs, question=query)
#     except:
#         return "I apologize, but I am not sure what specific statement you are referring to. Can you please provide more context or clarify your request so that I can better assist you?"
    
import os
import openai
from flask import Response
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import Pinecone

openai.api_key = os.environ.get('OPENAI_API_KEY')
embeddings = OpenAIEmbeddings()

class ChatbotService:
    def __init__(self):
        pass
    
    def chatbot_query_using_openai_in_stream(self, index_name, namespace, query):
        """
        Perform a query on a specific index and namespace using OpenAI and Pinecone.

        Args:
            index_name (str): The name of the Pinecone index.
            namespace (str): The namespace within the index.
            query (str): The query string.

        Returns:
            str: The processed answer generated by OpenAI.
        """
        # Get documents related to the query from Pinecone
        docsearch = Pinecone.from_existing_index(index_name=index_name, embedding=embeddings, namespace=namespace)
        docs = docsearch.similarity_search(query)
        context = ''
        
        for doc in docs:
            # Extract the required information from the document
            page_content = doc.page_content

            context += f"{page_content}\n"

        # Create the prompt with the context and the user's query
        prompt = f"""
        You are given a context delimited by ``` along with a question. 
        Your objective is to generate an appropriate answer. 
        include the actual website links that contain https and contact details in your answers when necessary.
        Format the answer appropriately based on the user's query. 
        Remember the context of the conversation and keep the dialogue flowing smoothly.
        
        ```{context}```
        
        question:{query}
        """

        def stream():
            # Create a stream of chat responses using OpenAI Chat models
            completion = openai.ChatCompletion.create(
                model='gpt-3.5-turbo',
                messages=[{"role": "user", "content": prompt}],
                stream=True
            )
            for line in completion:
                chunk = line['choices'][0].get('delta', {}).get('content', '')
                if chunk:
                    yield f"{chunk}"

        return Response(stream(), mimetype='text/event-stream')
